{
  "_args": [
    [
      {
        "raw": "autoprefixer",
        "scope": null,
        "escapedName": "autoprefixer",
        "name": "autoprefixer",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/kuliczkowsky/Desktop/Advanced CSS Sass/advanced-css-course-master/Natours/starter"
    ]
  ],
  "_from": "autoprefixer",
  "_hasShrinkwrap": false,
  "_id": "autoprefixer@9.2.1",
  "_location": "/autoprefixer",
  "_nodeVersion": "10.12.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/autoprefixer_9.2.1_1539733781996_0.9655022208316439"
  },
  "_npmUser": {
    "name": "ai",
    "email": "andrey@sitnik.ru"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "autoprefixer",
    "scope": null,
    "escapedName": "autoprefixer",
    "name": "autoprefixer",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-9.2.1.tgz",
  "_shasum": "1f2f1179ceed4711b7ab064dbd5c3f9e83d9dc62",
  "_shrinkwrap": null,
  "_spec": "autoprefixer",
  "_where": "/Users/kuliczkowsky/Desktop/Advanced CSS Sass/advanced-css-course-master/Natours/starter",
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "bin": {
    "autoprefixer": "./bin/autoprefixer"
  },
  "bugs": {
    "url": "https://github.com/postcss/autoprefixer/issues"
  },
  "dependencies": {
    "browserslist": "^4.2.1",
    "caniuse-lite": "^1.0.30000892",
    "normalize-range": "^0.1.2",
    "num2fraction": "^1.2.2",
    "postcss": "^7.0.5",
    "postcss-value-parser": "^3.3.1"
  },
  "description": "Parse CSS and add vendor prefixes to CSS rules using values from the Can I Use website",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-qlK4GnZk8OXLK+8kBn9ttfzu2PkhRe8kVYoWcc9HsrZEMWiBkQuRYdXyJg9cIIKxfMzhh6UbvlJ1CsstMIzxwA==",
    "shasum": "1f2f1179ceed4711b7ab064dbd5c3f9e83d9dc62",
    "tarball": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-9.2.1.tgz",
    "fileCount": 74,
    "unpackedSize": 301475,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbxnkXCRA9TVsSAnZWagAAJK4P/1dJ8cnKpQmWAdfVupaa\nfKUq2pB8JJA475Q/E0y6NUUFNB5TfzKcS4e+5oZj4xfczGojoEzssVZ2YLna\nQgnwFdzsZhZJNO8B83SP7Qn/7gvKSofOg0dMa0G5slnj5zRpR3K5a/R3HiGm\nWdrI3rvpPh/FGwk5UAPXeF3BWRNTAcs2Q82tewNenfwZOCKDIa/lbUIXzJp/\nUxSuDLAeV9cMdCVXI3libXojUhq0gBFQR7rAS5Zwa3eRRmvvO1VCSYRMKcMb\nyXPg3g8JW0znM3RpZE3bhJFqZSYAwHe4tAqSw2j9D3zdPxigaT84DgC10a6J\nr5LQ6kxdOd7Irll7Ms7wRpViePi492TACsYnfNZj0WJO+MhYfxSoZCm6GVXk\n6rqVv/J1bp2HjAB1DEYHV4Lo5HpI7kHqcsBJTyAGOThIDDlpqXuK43JEtoe4\nJVUmIduWMbHGP4Yv+JQY5cQaTPVLBYtuhsTfYJftuBs6ZGJhWDuWimMBjsVj\nGhEWEkH1WJcW9q5BqybXkGTOdCc76jmsWgZgGuUt0hyi05RAhZdswI/xYASo\nfACVq+GYD8CI2kHSDttVZ29pnu9vDRAfd+pGDq0dusJ2jQOpLGp51t11sscC\nEAJfuh/2LuJJkIDIjjRwHxVRH57aMPZzByywqXSIUbVHGIivFDzD5A0kUsX6\nzY0S\r\n=lp97\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6.0.0"
  },
  "homepage": "https://github.com/postcss/autoprefixer#readme",
  "keywords": [
    "autoprefixer",
    "css",
    "prefix",
    "postcss",
    "postcss-plugin"
  ],
  "license": "MIT",
  "main": "lib/autoprefixer",
  "maintainers": [
    {
      "name": "11bit",
      "email": "buryak.ivan@yandex.ru"
    },
    {
      "name": "ai",
      "email": "andrey@sitnik.ru"
    },
    {
      "name": "beneb",
      "email": "beneb.info@gmail.com"
    },
    {
      "name": "kossnocorp",
      "email": "kossnocorp@gmail.com"
    }
  ],
  "name": "autoprefixer",
  "optionalDependencies": {},
  "readme": "# Autoprefixer [![Cult Of Martians][cult-img]][cult]\n\n<img align=\"right\" width=\"94\" height=\"71\"\n     src=\"http://postcss.github.io/autoprefixer/logo.svg\"\n     title=\"Autoprefixer logo by Anton Lovchikov\">\n\n[PostCSS] plugin to parse CSS and add vendor prefixes to CSS rules using values\nfrom [Can I Use]. It is [recommended] by Google and used in Twitter and Taobao.\n\nWrite your CSS rules without vendor prefixes (in fact, forget about them\nentirely):\n\n```css\n::placeholder {\n  color: gray;\n}\n```\n\nAutoprefixer will use the data based on current browser popularity and property\nsupport to apply prefixes for you. You can try the [interactive demo]\nof Autoprefixer.\n\n```css\n::-webkit-input-placeholder {\n  color: gray;\n}\n:-ms-input-placeholder {\n  color: gray;\n}\n::-ms-input-placeholder {\n  color: gray;\n}\n::placeholder {\n  color: gray;\n}\n```\n\nTwitter account for news and releases: [@autoprefixer].\n\n<a href=\"https://evilmartians.com/?utm_source=autoprefixer\">\n<img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\" alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n[interactive demo]: http://autoprefixer.github.io/\n[@autoprefixer]:    https://twitter.com/autoprefixer\n[recommended]:      https://developers.google.com/web/tools/setup/setup-buildtools#dont_trip_up_with_vendor_prefixes\n[Can I Use]:        http://caniuse.com/\n[cult-img]:         http://cultofmartians.com/assets/badges/badge.svg\n[PostCSS]:          https://github.com/postcss/postcss\n[cult]:             http://cultofmartians.com/tasks/autoprefixer-grid.html\n\n\n## Browsers\n\nAutoprefixer uses [Browserslist], so you can specify the browsers\nyou want to target in your project with queries like `> 5%`\n(see [Best Practices]).\n\nThe best way to provide browsers is a `.browserslistrc` file in your project\nroot, or by adding a `browserslist` key to your `package.json`.\n\nWe recommend the use of these options over passing options to Autoprefixer so\nthat the config can be shared with other tools such as [babel-preset-env] and\n[Stylelint].\n\nSee [Browserslist docs] for queries, browser names, config format, and defaults.\n\n[Browserslist docs]: https://github.com/ai/browserslist#queries\n[babel-preset-env]:  https://github.com/babel/babel/tree/master/packages/babel-preset-env\n[Best Practices]:    https://github.com/browserslist/browserslist#best-practices\n[Browserslist]:      https://github.com/ai/browserslist\n[Stylelint]:         http://stylelint.io/\n\n\n## FAQ\n\n#### Does Autoprefixer polyfill Grid Layout for IE?\n\nAutoprefixer can be used to use Grid Layout for IE 10 and IE 11, but this\npolyfill will not work in 100% of cases. This is why it is disabled by default.\n\nFirst, you need to enable Grid prefixes by `grid: true` option or `/* autoprefixer grid: on */` comment.\n\nSecond, you need to test every fix with Grid in IE. It is not an enable and\nforget feature, but it is still very useful.\nFinancial Times and Yandex use it in production.\n\nThird, there is no auto placement, so all grid cell positions must be set\nexplicitly. Autoprefixer _can_ covert `grid-template` and `grid-gap`, but only\nwhen both are used together.\n\n```css\n.page {\n    display: grid;\n    grid-gap: 33px;\n    grid-template:\n        \"head head  head\" 1fr\n        \"nav  main  main\" minmax(100px, 1fr)\n        \"nav  foot  foot\" 2fr /\n        1fr   100px 1fr;\n}\n.page__head {\n    grid-area: head;\n}\n.page__nav {\n    grid-area: nav;\n}\n.page__main {\n    grid-area: main;\n}\n.page__footer {\n    grid-area: foot;\n}\n```\n\nSee also:\n\n* [The guide about Grids in IE and Autoprefixer].\n* [`postcss-gap-properties`] to use new `gap` property\n  instead of old `grid-gap`.\n* [`postcss-grid-kiss`] has alternate “everything in one property” syntax,\n  which make using Autoprefixer’s Grid safer.\n\n[The guide about Grids in IE and Autoprefixer]: https://css-tricks.com/css-grid-in-ie-css-grid-and-the-new-autoprefixer/\n[`postcss-gap-properties`]:                     https://github.com/jonathantneal/postcss-gap-properties\n[`postcss-grid-kiss`]:                          https://github.com/sylvainpolletvillard/postcss-grid-kiss\n\n#### No prefixes in production\n\nMany other tools contain Autoprefixer. For example, webpack uses Autoprefixer\nto minify CSS by cleaning unnecessary prefixes.\n\nIf you pass your browsers to Autoprefixer using its `browsers` option, the other\ntools will use their own config, leading webpack to remove the prefixes that\nthe first Autoprefixer added.\n\nTo avoid this, ensure you use either the [browserslist config file] or\n`browsers` key in your `package.json`, so that all tools (Autoprefixer,\ncssnano, doiuse, cssnext, etc) use the same browsers list.\n\n[browserslist config file]: https://github.com/ai/browserslist#config-file\n\n\n#### What is the unprefixed version of `-webkit-min-device-pixel-ratio`?\n\n```css\n@media (min-resolution: 2dppx) {\n    .image {\n        background-image: url(image@2x.png);\n    }\n}\n```\n\nWill be compiled to:\n\n```css\n@media (-webkit-min-device-pixel-ratio: 2),\n       (-o-min-device-pixel-ratio: 2/1),\n       (min-resolution: 2dppx) {\n    .image {\n        background-image: url(image@2x.png);\n    }\n}\n```\n\n\n#### Does it add polyfills?\n\nNo. Autoprefixer only adds prefixes.\n\nMost new CSS features will require client side JavaScript to handle a new\nbehavior correctly.\n\nDepending on what you consider to be a “polyfill”, you can take a look at some\nother tools and libraries. If you are just looking for syntax sugar,\nyou might take a look at:\n\n- [postcss-preset-env] is a plugins preset with polyfills and Autoprefixer\n  to write future CSS today.\n- [Oldie], a PostCSS plugin that handles some IE hacks (opacity, rgba, etc).\n- [postcss-flexbugs-fixes], a PostCSS plugin to fix flexbox issues.\n\n[postcss-flexbugs-fixes]: https://github.com/luisrudge/postcss-flexbugs-fixes\n[postcss-preset-env]:     https://github.com/jonathantneal/postcss-preset-env\n[Oldie]:                  https://github.com/jonathantneal/oldie\n\n\n#### Why doesn’t Autoprefixer add prefixes to `border-radius`?\n\nDevelopers are often surprised by how few prefixes are required today.\nIf Autoprefixer doesn’t add prefixes to your CSS, check if they’re still\nrequired on [Can I Use].\n\n[Can I Use]: http://caniuse.com/\n\n\n#### Why does Autoprefixer use unprefixed properties in `@-webkit-keyframes`?\n\nBrowser teams can remove some prefixes before others, so we try to use all\ncombinations of prefixed/unprefixed values.\n\n\n#### How to work with legacy `-webkit-` only code?\n\nAutoprefixer needs unprefixed property to add prefixes. So if you only\nwrote `-webkit-gradient` without W3C’s `gradient`,\nAutoprefixer will not add other prefixes.\n\nBut [PostCSS] has plugins to convert CSS to unprefixed state.\nUse [postcss-unprefix] before Autoprefixer.\n\n[postcss-unprefix]: https://github.com/gucong3000/postcss-unprefix\n\n\n#### Does Autoprefixer add `-epub-` prefix?\n\nNo, Autoprefixer works only with browsers prefixes from Can I Use.\nBut you can use [postcss-epub]\nfor prefixing ePub3 properties.\n\n[postcss-epub]: https://github.com/Rycochet/postcss-epub\n\n\n#### Why doesn’t Autoprefixer transform generic font-family `system-ui`?\n\n`system-ui` is technically not a prefix and the transformation is not\nfuture-proof. You can use [postcss-font-family-system-ui] to transform\n`system-ui` to a practical font-family list.\n\n[postcss-font-family-system-ui]: https://github.com/JLHwung/postcss-font-family-system-ui\n\n\n## Usage\n\n### Gulp\n\nIn Gulp you can use [gulp-postcss] with `autoprefixer` npm package.\n\n```js\ngulp.task('autoprefixer', function () {\n    var postcss      = require('gulp-postcss');\n    var sourcemaps   = require('gulp-sourcemaps');\n    var autoprefixer = require('autoprefixer');\n\n    return gulp.src('./src/*.css')\n        .pipe(sourcemaps.init())\n        .pipe(postcss([ autoprefixer() ]))\n        .pipe(sourcemaps.write('.'))\n        .pipe(gulp.dest('./dest'));\n});\n```\n\nWith `gulp-postcss` you also can combine Autoprefixer\nwith [other PostCSS plugins].\n\n[gulp-postcss]:          https://github.com/postcss/gulp-postcss\n[other PostCSS plugins]: https://github.com/postcss/postcss#plugins\n\n\n### Webpack\n\nIn [webpack] you can use [postcss-loader] with `autoprefixer`\nand [other PostCSS plugins].\n\n```js\nmodule.exports = {\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [\"style-loader\", \"css-loader\", \"postcss-loader\"]\n            }\n        ]\n    }\n}\n```\n\nAnd create a `postcss.config.js` with:\n\n```js\nmodule.exports = {\n  plugins: [\n    require('autoprefixer')\n  ]\n}\n```\n\n[other PostCSS plugins]: https://github.com/postcss/postcss#plugins\n[postcss-loader]:        https://github.com/postcss/postcss-loader\n[webpack]:               http://webpack.github.io/\n\n\n### Grunt\n\nIn Grunt you can use [grunt-postcss] with `autoprefixer` npm package.\n\n```js\nmodule.exports = function(grunt) {\n    grunt.loadNpmTasks('grunt-postcss');\n\n    grunt.initConfig({\n        postcss: {\n            options: {\n                map: true,\n                processors: [\n                    require('autoprefixer')\n                ]\n            },\n            dist: {\n                src: 'css/*.css'\n            }\n        }\n    });\n\n    grunt.registerTask('default', ['postcss:dist']);\n};\n```\n\nWith `grunt-postcss` you also can combine Autoprefixer\nwith [other PostCSS plugins].\n\n[other PostCSS plugins]: https://github.com/postcss/postcss#plugins\n[grunt-postcss]:         https://github.com/nDmitry/grunt-postcss\n\n\n### Other Build Tools:\n\n* **Ruby on Rails**: [autoprefixer-rails]\n* **Neutrino**: [neutrino-middleware-postcss]\n* **Jekyll**: add `autoprefixer-rails` and `jekyll-assets` to `Gemfile`\n* **Brunch**: [postcss-brunch]\n* **Broccoli**: [broccoli-postcss]\n* **Middleman**: [middleman-autoprefixer]\n* **Mincer**: add `autoprefixer` npm package and enable it:\n  `environment.enable('autoprefixer')`\n\n[neutrino-middleware-postcss]: https://www.npmjs.com/package/neutrino-middleware-postcss\n[middleman-autoprefixer]:      https://github.com/middleman/middleman-autoprefixer\n[autoprefixer-rails]:          https://github.com/ai/autoprefixer-rails\n[broccoli-postcss]:            https://github.com/jeffjewiss/broccoli-postcss\n[postcss-brunch]:              https://github.com/iamvdo/postcss-brunch\n\n\n### Preprocessors\n\n* **Less**: [less-plugin-autoprefix]\n* **Stylus**: [autoprefixer-stylus]\n* **Compass**: [autoprefixer-rails#compass]\n\n[less-plugin-autoprefix]: https://github.com/less/less-plugin-autoprefix\n[autoprefixer-stylus]:    https://github.com/jenius/autoprefixer-stylus\n[autoprefixer-rails#compass]:     https://github.com/ai/autoprefixer-rails#compass\n\n\n### CSS-in-JS\n\nThere is [postcss-js] to use Autoprefixer in React Inline Styles, [Free Style],\nRadium and other CSS-in-JS solutions.\n\n```js\nlet prefixer = postcssJs.sync([ autoprefixer ]);\nlet style = prefixer({\n    display: 'flex'\n});\n```\n\n[postcss-js]: https://github.com/postcss/postcss-js\n[Free Style]: https://github.com/blakeembrey/free-style\n\n\n### GUI Tools\n\n* [CodeKit](https://codekitapp.com/help/autoprefixer/)\n* [Prepros](https://prepros.io)\n\n\n### CLI\n\nYou can use the [postcss-cli] to run Autoprefixer from CLI:\n\n```sh\nnpm install postcss-cli autoprefixer\nnpx postcss *.css --use autoprefixer -d build/\n```\n\nSee `postcss -h` for help.\n\n[postcss-cli]: https://github.com/postcss/postcss-cli\n\n\n### JavaScript\n\nYou can use Autoprefixer with [PostCSS] in your Node.js application\nor if you want to develop an Autoprefixer plugin for a new environment.\n\n```js\nvar autoprefixer = require('autoprefixer');\nvar postcss      = require('postcss');\n\npostcss([ autoprefixer ]).process(css).then(function (result) {\n    result.warnings().forEach(function (warn) {\n        console.warn(warn.toString());\n    });\n    console.log(result.css);\n});\n```\n\nThere is also a [standalone build] for the browser or for a non-Node.js runtime.\n\nYou can use [html-autoprefixer] to process HTML with inlined CSS.\n\n[html-autoprefixer]: https://github.com/RebelMail/html-autoprefixer\n[standalone build]:  https://raw.github.com/ai/autoprefixer-rails/master/vendor/autoprefixer.js\n[PostCSS]:           https://github.com/postcss/postcss\n\n\n### Text Editors and IDE\n\nAutoprefixer should be used in assets build tools. Text editor plugins are not\na good solution, because prefixes decrease code readability and you will need\nto change values in all prefixed properties.\n\nI recommend you to learn how to use build tools like [Gulp].\nThey work much better and will open you a whole new world of useful plugins\nand automation.\n\nIf you can’t move to a build tool, you can use text editor plugins:\n\n* [Sublime Text](https://github.com/sindresorhus/sublime-autoprefixer)\n* [Brackets](https://github.com/mikaeljorhult/brackets-autoprefixer)\n* [Atom Editor](https://github.com/sindresorhus/atom-autoprefixer)\n* [Visual Studio](https://github.com/madskristensen/WebCompiler)\n\n[Gulp]:  http://gulpjs.com/\n\n\n## Warnings\n\nAutoprefixer uses the [PostCSS warning API] to warn about really important\nproblems in your CSS:\n\n* Old direction syntax in gradients.\n* Old unprefixed `display: box` instead of `display: flex`\n  by latest specification version.\n\nYou can get warnings from `result.warnings()`:\n\n```js\nresult.warnings().forEach(function (warn) {\n    console.warn(warn.toString());\n});\n```\n\nEvery Autoprefixer runner should display these warnings.\n\n[PostCSS warning API]: https://github.com/postcss/postcss/blob/master/docs/api.md#warning-class\n\n\n## Disabling\n\n### Prefixes\n\nAutoprefixer was designed to have no interface – it just works.\nIf you need some browser specific hack just write a prefixed property\nafter the unprefixed one.\n\n```css\na {\n    transform: scale(0.5);\n    -moz-transform: scale(0.6);\n}\n```\n\nIf some prefixes were generated incorrectly, please create an [issue on GitHub].\n\n[issue on GitHub]: https://github.com/postcss/autoprefixer/issues\n\n\n### Features\n\nYou can use these plugin options to disable some of Autoprefixer’s features.\n\n* `grid: true` will enable `-ms-` prefixes for Grid Layout.\n* `supports: false` will disable `@supports` parameters prefixing.\n* `flexbox: false` will disable flexbox properties prefixing.\n  Or `flexbox: \"no-2009\"` will add prefixes only for final and IE\n  versions of specification.\n* `remove: false` will disable cleaning outdated prefixes.\n\nYou should set them to the plugin:\n\n```js\nautoprefixer({ grid: true });\n```\n\n\n### Control Comments\n\nIf you do not need Autoprefixer in some part of your CSS,\nyou can use control comments to disable Autoprefixer.\n\n```css\n.a {\n    transition: 1s; /* will be prefixed */\n}\n\n.b {\n    /* autoprefixer: off */\n    transition: 1s; /* will not be prefixed */\n}\n\n.c {\n    /* autoprefixer: ignore next */\n    transition: 1s; /* will not be prefixed */\n    mask: url(image.png); /* will be prefixed */\n}\n```\n\nThere are three types of control comments:\n\n* `/* autoprefixer: off */` disable the whole block *before* and after comment.\n* `/* autoprefixer: ignore next */` disable only next property\n  or next rule selector or at-rule parameters (but not rule/at‑rule body).\n* `/* autoprefixer grid: on */` enable grid option. Use `off` to disable this option.\n\nYou can also use comments recursively:\n\n```css\n/* autoprefixer: off */\n@supports (transition: all) {\n    /* autoprefixer: on */\n    a {\n        /* autoprefixer: off */\n    }\n}\n```\n\n\n## Options\n\nFunction `autoprefixer(options)` returns a new PostCSS plugin.\nSee [PostCSS API] for plugin usage documentation.\n\n```js\nautoprefixer({ cascade: false })\n```\n\nAvailable options are:\n\n* `env` (string): environment for Browserslist.\n* `cascade` (boolean): should Autoprefixer use Visual Cascade,\n  if CSS is uncompressed. Default: `true`\n* `add` (boolean): should Autoprefixer add prefixes. Default is `true`.\n* `remove` (boolean): should Autoprefixer [remove outdated] prefixes.\n  Default is `true`.\n* `supports` (boolean): should Autoprefixer add prefixes for `@supports`\n  parameters. Default is `true`.\n* `flexbox` (boolean|string): should Autoprefixer add prefixes for flexbox\n  properties. With `\"no-2009\"` value Autoprefixer will add prefixes only\n  for final and IE versions of specification. Default is `true`.\n* `grid` (boolean): should Autoprefixer add IE prefixes for Grid Layout\n  properties. Default is `false`. You can also use `/* autoprefixer grid: on */`\n  comment in CSS.\n* `stats` (object): custom [usage statistics] for `> 10% in my stats`\n  browsers query.\n* `browsers` (array): list of queries for target browsers. Try to not use it.\n  The best practice is to use `.browserslistrc` config\n  or `browserslist` key in `package.json` to share target browsers\n  with Babel, ESLint and Stylelint. See [Browserslist docs]\n  for available queries and default value.\n* `ignoreUnknownVersions` (boolean): do not raise error on unknown browser\n  version in Browserslist config or `browsers` option. Default is `false`.\n\nPlugin object has `info()` method for debugging purpose.\n\nYou can use PostCSS processor to process several CSS files\nto increase performance.\n\n[usage statistics]: https://github.com/ai/browserslist#custom-usage-data\n[PostCSS API]:      http://api.postcss.org\n\n\n## Debug\n\nRun `npx autoprefixer --info` in your project directory to check\nwhich browsers are selected and which properties will be prefixed:\n\n```\n$ npx autoprefixer --info\nBrowsers:\n  Edge: 16\n\nThese browsers account for 0.26% of all users globally\n\nAt-Rules:\n  @viewport: ms\n\nSelectors:\n  ::placeholder: ms\n\nProperties:\n  appearance: webkit\n  flow-from: ms\n  flow-into: ms\n  hyphens: ms\n  overscroll-behavior: ms\n  region-fragment: ms\n  scroll-snap-coordinate: ms\n  scroll-snap-destination: ms\n  scroll-snap-points-x: ms\n  scroll-snap-points-y: ms\n  scroll-snap-type: ms\n  text-size-adjust: ms\n  text-spacing: ms\n  user-select: ms\n```\n\nJS API is also available:\n\n```js\nvar info = autoprefixer().info();\nconsole.log(info);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postcss/autoprefixer.git"
  },
  "version": "9.2.1"
}
